#!/bin/sh

echo "Version 1.068"

#
# This script is meant for quick & easy install via:
#   curl -sSL https://healthcatalyst.github.io/InstallScripts/azure/createkubernetescluster.txt | sh -s

# Remember: no spaces allowed in variable set commands in bash

AKS_PERS_RESOURCE_GROUP=
AKS_PERS_LOCATION=
AKS_CLUSTER_NAME=
AKS_PERS_STORAGE_ACCOUNT_NAME=
AKS_PERS_SHARE_NAME=
AKS_SUBSCRIPTION_ID=
AKS_VNET_NAME=
AKS_SUBNET_NAME=
AKS_SSH_KEY=

# AKS_PERS_RESOURCE_GROUP=fabricnlpkubernetes
# AKS_PERS_LOCATION=eastus
# AKS_CLUSTER_NAME=fabricnlpcluster
# AKS_PERS_STORAGE_ACCOUNT_NAME=fabricnlpclusterstorage
# AKS_PERS_SHARE_NAME=fileshare

# AKS_PERS_RESOURCE_GROUP=ImranNLPTest
# AKS_PERS_LOCATION=westus
# AKS_CLUSTER_NAME=cluster1
# AKS_PERS_STORAGE_ACCOUNT_NAME=ImranNLPTeststorage
# AKS_PERS_SHARE_NAME=fileshare

echo "checking if you're already logged in"
loggedInUser=$(az.cmd account show --query "user.name"  -o tsv)

if [[ ! -z $loggedInUser ]]
then
    SUBSCRIPTION_NAME=$(az.cmd account show --query "name"  -o tsv)
    echo "You are currently logged in as $loggedInUser into subscription $SUBSCRIPTION_NAME"
    DO_RELOGIN=
    read -p "Do you want to continue or logged in again (type ENTER to continue or any key to login again):" DO_RELOGIN < /dev/tty
    if [[ ! -z  $DO_RELOGIN ]]
    then
        az.cmd login
    fi
else
    # login
    az.cmd login
fi

echo getting current subscription id
az.cmd account show
AKS_SUBSCRIPTION_ID=$(az.cmd account show --query "id" -o tsv)
read -p "Using above subscription.  Check and then click enter to continue or ctrl-C to exit"

read -p "Resource Group: (e.g., fabricnlp-rg):" AKS_PERS_RESOURCE_GROUP < /dev/tty
read -p "Location: (e.g., eastus):" AKS_PERS_LOCATION < /dev/tty
read -p "Cluster Name: (e.g., fabricnlpcluster):" AKS_CLUSTER_NAME < /dev/tty
read -p "Storage Account Name: (leave empty for default):" AKS_PERS_STORAGE_ACCOUNT_NAME < /dev/tty
read -p "Storage File share Name: (leave empty for default):" AKS_PERS_SHARE_NAME < /dev/tty

if [[ -z  "${AKS_PERS_STORAGE_ACCOUNT_NAME}" ]]
then
    AKS_PERS_STORAGE_ACCOUNT_NAME=${AKS_PERS_RESOURCE_GROUP}storage
    echo "Using storage account: ${AKS_PERS_STORAGE_ACCOUNT_NAME}"
fi

if [[ -z  "${AKS_PERS_SHARE_NAME}" ]]
then
    AKS_PERS_SHARE_NAME=fileshare
    echo "Using share name: ${AKS_PERS_SHARE_NAME}"
fi

echo "checking if resource group already exists"
resourceGroupExists=$(az.cmd group exists --name ${AKS_PERS_RESOURCE_GROUP})
if [[ "$resourceGroupExists" == "true" ]]
then
    read -p "The resource group ${AKS_PERS_RESOURCE_GROUP} already exists.  Would you like to delete it? (type ENTER to continue or CTRL-C to exit)"

    echo delete existing group: $AKS_PERS_RESOURCE_GROUP

    az.cmd group delete --name $AKS_PERS_RESOURCE_GROUP --verbose

    kubresourcegroup="MC_${AKS_PERS_RESOURCE_GROUP}_${AKS_CLUSTER_NAME}_${AKS_PERS_LOCATION}"
    echo "waiting until the corresponding kubernetes resource group [$kubresourcegroup] is also delete"

    az.cmd group wait --name $kubresourcegroup --deleted
fi

echo "Create the Resource Group"
az.cmd group create --name $AKS_PERS_RESOURCE_GROUP --location $AKS_PERS_LOCATION --verbose

set -x

AKS_SERVICE_PRINCIPAL_NAME=${AKS_PERS_RESOURCE_GROUP}Kubernetes

echo "checking if Service Principal already exists"
AKS_SERVICE_PRINCIPAL_CLIENTID=$(az.cmd ad sp list --display-name ${AKS_SERVICE_PRINCIPAL_NAME} --query "[].appId" -o tsv)

if [[ ! -z "$AKS_SERVICE_PRINCIPAL_CLIENTID" ]]
then
    echo "Service Principal already exists with name: $AKS_SERVICE_PRINCIPAL_NAME"
    echo "deleting..."
    az.cmd ad sp delete --id "$AKS_SERVICE_PRINCIPAL_CLIENTID" --verbose
fi

myscope="//subscriptions//${AKS_SUBSCRIPTION_ID}"

echo $myscope

echo "Creating Service Principal: $AKS_SERVICE_PRINCIPAL_NAME"
# clientID == appID
# client secret == password
AKS_SERVICE_PRINCIPAL_CLIENTSECRET=$(az.cmd ad sp create-for-rbac --role="Contributor" --scopes="$myscope" --name ${AKS_SERVICE_PRINCIPAL_NAME} --query "password" -o tsv)
AKS_SERVICE_PRINCIPAL_CLIENTID=$(az.cmd ad sp list --display-name ${AKS_SERVICE_PRINCIPAL_NAME} --query "[].appId" -o tsv)

echo created $AKS_SERVICE_PRINCIPAL_NAME clientId=$AKS_SERVICE_PRINCIPAL_CLIENTID clientsecret=$AKS_SERVICE_PRINCIPAL_CLIENTSECRET

# if [ ! -e  "~/.ssh/id_rsa" ]
# then
#    echo "creating SSH key"
#    ssh-keygen -t rsa -b 2048 -q -N "" -C azureuser@linuxvm -f ~/.ssh/id_rsa
# fi

AKS_SSH_KEY=$(cat ~/.ssh/id_rsa.pub)

dnsNamePrefix=$AKS_PERS_RESOURCE_GROUP

numNodes=1

echo create Azure Container Service cluster AKS
az.cmd aks create --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME \
    --node-count ${numNodes} --kubernetes-version 1.8.1 \
    --node-vm-size Standard_B2ms \
    --service-principal="$AKS_SERVICE_PRINCIPAL_CLIENTID" \
    --client-secret="$AKS_SERVICE_PRINCIPAL_CLIENTSECRET" \
    -l $AKS_PERS_LOCATION \
    --verbose

echo "waiting until cluster is created"
az.cmd aks wait --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME --created

echo sleeping for 10 secs
# sleep 30s;

read -p "Press enter to continue once all the nodes are created"

# echo "download kubectl"
# mkdir -p c:/kubernetes
# rm c:/kubernetes/kubectl.exe
# az.cmd acs install-cli --resource-group=$AKS_PERS_RESOURCE_GROUP --name=$AKS_CLUSTER_NAME --install-location c:/kubernetes

echo get credentials for AKS cluster
az.cmd aks get-credentials --resource-group=$AKS_PERS_RESOURCE_GROUP --name=$AKS_CLUSTER_NAME

echo check nodes via kubectl
kubectl get nodes

nodeCount=0

while [ $nodeCount -lt ${numNodes} ]
do
sleep 10s;
nodeCount=$(wc -l <<< "$(kubectl get nodes -o=name)")
echo nodes: $nodeCount
done



echo Create the storage account
az.cmd storage account create -n $AKS_PERS_STORAGE_ACCOUNT_NAME -g $AKS_PERS_RESOURCE_GROUP -l $AKS_PERS_LOCATION --sku Standard_LRS

# Export the connection string as an environment variable, this is used when creating the Azure file share
AZURE_STORAGE_CONNECTION_STRING=$(az.cmd storage account show-connection-string -n $AKS_PERS_STORAGE_ACCOUNT_NAME -g $AKS_PERS_RESOURCE_GROUP -o tsv)

echo Create the file share
az.cmd storage share create -n $AKS_PERS_SHARE_NAME --connection-string $AZURE_STORAGE_CONNECTION_STRING

echo Get storage account key
STORAGE_KEY=$(az.cmd storage account keys list --resource-group $AKS_PERS_RESOURCE_GROUP --account-name $AKS_PERS_STORAGE_ACCOUNT_NAME --query "[0].value" -o tsv)

echo storagekey: $STORAGE_KEY

echo creating kubernetes secret
kubectl create secret generic azure-secret --from-literal=azurestorageaccountname="${AKS_PERS_STORAGE_ACCOUNT_NAME}" --from-literal=azurestorageaccountkey="${STORAGE_KEY}"

# kubectl apply -f testfileshare-pod.yml

# kubectl describe pod testfileshare-pod

# https://docs.microsoft.com/en-us/azure/aks/kubernetes-dashboard
echo open kubernetes dashboard in browser
echo az.cmd aks browse --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME

echo deploy the ingress controller
kubectl create -f ingress.yml

kubectl create -f loadbalancer-public.yml

kubectl get deployments,pods,services,ingress,secrets,persistentvolumeclaims,persistentvolumes,nodes --namespace=kube-system

echo az.cmd storage share create --name fabricnlp --account-name="${AKS_PERS_STORAGE_ACCOUNT_NAME}" --account-key="${STORAGE_KEY}"

# az network public-ip create --name TestPIP --resource-group TestRG --location centralus --allocation-method Static


