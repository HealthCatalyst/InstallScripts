# --- MySql ---
# Pod
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
# name for this pod
  name: mysqlserver
# namespace for this pod
  namespace: fabricrealtime  
  labels:
    app: mysqlserver
spec:
  replicas: 1
  revisionHistoryLimit: 3  # Clean-up old Replica Sets deployed; only keep previous 3.
  strategy:
    # We need to kill the existing Pod before creating an new one
    # for the new one to be able to attach the persistent disk.
    type: Recreate        
  selector:
    matchLabels:
      app: mysqlserver
  template:
    metadata:
      labels:
        app: mysqlserver
    spec:
      containers:
        # name of this pod
        - name: mysqlserver
          # image to pull
          image: healthcatalyst/fabric.realtime.mysql:latest
          # specify to always pull a new image
          imagePullPolicy: Always
          # environment variables
          env:
            - name: MYSQL_ROOT_PASSWORD
              # set the value of this environment variable from a secret called mysqlrootpassword
              valueFrom:
                secretKeyRef:
                  name: mysqlrootpassword
                  key: password
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysqlpassword
                  key: password
            - name: MYSQL_DATABASE
              # set the value of this environment variable directly
              value: mirthdb
            - name: MYSQL_USER
              value: mirthuser
          ports:
            # expose port 3306
            - containerPort: 3306
              # name of the port
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              # point the /var/lib/mysql folder inside the container to the volume called mysql-persistent-storage
              mountPath: /var/lib/mysql
              subPath: mysql              
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: az-files-mysql            
---
# Service
kind: Service
apiVersion: v1
metadata:
# this service shows up in the UI with this name
  name: mysqlserver
# namespace should match other services in this file  
  namespace: fabricrealtime  
# labels allows you to use selectors to find this service
  labels:
    app: mysqlserver
spec:
  ports:
# port that other services can use to connect to this service
  - port: 3306
# port in the pod we map to  
    targetPort: 3306
    protocol: TCP
# selector says this service should use a pod that has the "app: mysqlserver" label
  selector:
    app: mysqlserver
---
# -- end of MySql ---

# --- Certificate Server ---
# Pod
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
# name for this pod
  name: certificateserver
# namespace for this pod
  namespace: fabricrealtime  
  labels:
    app: certificateserver
spec:
  replicas: 1
  revisionHistoryLimit: 3  # Clean-up old Replica Sets deployed; only keep previous 3.
  strategy:
    # We need to kill the existing Pod before creating an new one
    # for the new one to be able to attach the persistent disk.
    type: Recreate        
  selector:
    matchLabels:
      app: certificateserver
  template:
    metadata:
      labels:
        app: certificateserver
    spec:
      containers:
        # name of this pod
        - name: certificateserver
          # image to pull
          image: healthcatalyst/fabric.certificateserver:latest
          # specify to always pull a new image
          imagePullPolicy: Always
          # environment variables
          env:
            - name: CERT_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: certhostname
                  key: value
            - name: CERT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: certpassword
                  key: password
            - name: CLIENT_CERT_USERNAME
              value: fabricrabbitmquser
          ports:
            # expose port 3000
            - containerPort: 3000
              # name of the port
              name: certserver
          volumeMounts:
            - name: certificateserver-persistent-storage
              # point the /var/lib/mysql folder inside the container to the volume called mysql-persistent-storage
              mountPath: /opt/certs/
              subPath: mysql              
      volumes:
      - name: certificateserver-persistent-storage
        persistentVolumeClaim:
          claimName: az-files-certificateserver            
---
