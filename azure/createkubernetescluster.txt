#!/bin/sh

echo "Version 1.068"

#
# This script is meant for quick & easy install via:
#   curl -sSL https://healthcatalyst.github.io/InstallScripts/azure/createkubernetescluster.txt | sh -s

# Remember: no spaces allowed in variable set commands in bash

AKS_PERS_RESOURCE_GROUP=
AKS_PERS_LOCATION=
AKS_CLUSTER_NAME=
AKS_PERS_STORAGE_ACCOUNT_NAME=
AKS_PERS_SHARE_NAME=

# AKS_PERS_RESOURCE_GROUP=fabricnlpkubernetes
# AKS_PERS_LOCATION=eastus
# AKS_CLUSTER_NAME=fabricnlpcluster
# AKS_PERS_STORAGE_ACCOUNT_NAME=fabricnlpclusterstorage
# AKS_PERS_SHARE_NAME=fileshare

read -p "Resource Group: (e.g., fabricnlp-rg):" AKS_PERS_RESOURCE_GROUP < /dev/tty
read -p "Location: (e.g., eastus):" AKS_PERS_LOCATION < /dev/tty
read -p "Cluster Name: (e.g., fabricnlpcluster):" AKS_CLUSTER_NAME < /dev/tty
read -p "Storage Account Name: (leave empty for default):" AKS_PERS_STORAGE_ACCOUNT_NAME < /dev/tty
read -p "Storage File share Name: (leave empty for default):" AKS_PERS_SHARE_NAME < /dev/tty

if [[ -z  "${AKS_PERS_STORAGE_ACCOUNT_NAME}" ]]
then
    AKS_PERS_STORAGE_ACCOUNT_NAME=${AKS_PERS_RESOURCE_GROUP}storage
    echo "Using storage account: ${AKS_PERS_STORAGE_ACCOUNT_NAME}"
fi

if [[ -z  "${AKS_PERS_SHARE_NAME}" ]]
then
    AKS_PERS_SHARE_NAME=fileshare
    echo "Using share name: ${AKS_PERS_SHARE_NAME}"
fi

# login
az.cmd login

echo "enable AKS container service"
az.cmd provider show -n Microsoft.ContainerService

echo "download kubectl"
mkdir -p c:/kubernetes
az.cmd aks install-cli --install-location c:/kubernetes

# delete existing group
# az.cmd group delete --name $AKS_PERS_RESOURCE_GROUP

echo "Create the Resource Group"
az.cmd group create --name $AKS_PERS_RESOURCE_GROUP --location $AKS_PERS_LOCATION

echo create Azure Container Service cluster AKS
az.cmd aks create --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME --node-count 3 --generate-ssh-keys --kubernetes-version 1.8.1 --node-vm-size Standard_B2ms

echo sleeping for 10 secs
# sleep 30s;

read -p "Press enter to continue once all the nodes are created"

echo get credentials for AKS cluster
az.cmd aks get-credentials --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME

echo check nodes via kubectl
kubectl get nodes

nodeCount=0

while [ $nodeCount -lt 3 ]
do
sleep 10s;
nodeCount=$(wc -l <<< "$(kubectl get nodes -o=name)")
echo nodes: $nodeCount
done



echo Create the storage account
az.cmd storage account create -n $AKS_PERS_STORAGE_ACCOUNT_NAME -g $AKS_PERS_RESOURCE_GROUP -l $AKS_PERS_LOCATION --sku Standard_LRS

# Export the connection string as an environment variable, this is used when creating the Azure file share
AZURE_STORAGE_CONNECTION_STRING=$(az.cmd storage account show-connection-string -n $AKS_PERS_STORAGE_ACCOUNT_NAME -g $AKS_PERS_RESOURCE_GROUP -o tsv)

echo Create the file share
az.cmd storage share create -n $AKS_PERS_SHARE_NAME --connection-string $AZURE_STORAGE_CONNECTION_STRING

echo Get storage account key
STORAGE_KEY=$(az.cmd storage account keys list --resource-group $AKS_PERS_RESOURCE_GROUP --account-name $AKS_PERS_STORAGE_ACCOUNT_NAME --query "[0].value" -o tsv)

echo storagekey: $STORAGE_KEY

echo creating kubernetes secret
kubectl create secret generic azure-secret --from-literal=azurestorageaccountname="${AKS_PERS_STORAGE_ACCOUNT_NAME}" --from-literal=azurestorageaccountkey="${STORAGE_KEY}"

# kubectl apply -f testfileshare-pod.yml

# kubectl describe pod testfileshare-pod

# https://docs.microsoft.com/en-us/azure/aks/kubernetes-dashboard
echo open kubernetes dashboard in browser
az.cmd aks browse --resource-group $AKS_PERS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME &

echo deploy the ingress controller
kubectl apply -f ingress.yml

kubectl get deployments,pods,services,ingress,secrets --namespace=kube-system




