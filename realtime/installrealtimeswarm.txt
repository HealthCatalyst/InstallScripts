#!/bin/sh
set -e

echo "Version 1.074"

#
# This script is meant for quick & easy install via:
#   curl -sSL https://healthcatalyst.github.io/InstallScripts/realtime/installrealtimeswarm.txt | sh -s

# Remember: no spaces allowed in variable set commands in bash
myhostname="$1"

# these are set in the script below
CertPassword=""
RabbitMqMgmtUiPassword=""
# todo: prompt for these
MySQLUser="mirthuser"
MySQLPassword="ilovemirth"
MySQLRootPassword="myrootpassword"

# if wait-for-it is not installed then install it
if [ ! -f "/usr/local/bin/wait-for-it" ]
then
	sudo yum -y install which dos2unix
	curl -O /tmp/wait-for-it.sh -sSL https://healthcatalyst.github.io/InstallScripts/wait-for-it.sh \
		&& dos2unix /tmp/wait-for-it.sh \
		&& chmod +x /tmp/wait-for-it.sh \
		&& sudo cp /tmp/wait-for-it.sh /usr/local/bin/wait-for-it
fi

# see if we already have a cert store created
hasexistingvolume=""
docker volume inspect --format '{{ .Mountpoint }}' rabbitmqcertstore 2> /dev/null && hasexistingvolume="yes" || echo "No existing volume found"

hasexistingmysqldata=""
docker volume inspect --format '{{ .Mountpoint }}' mysqlstore 2> /dev/null && hasexistingmysqldata="yes" || echo "No existing volume found"


deleteOldSSLCertificates=""

# if there is an existing volume then ask if user wants to delete it
if [ ! -z "$hasexistingvolume" ]; then
	while true; do
		read -e -p "Do you wish to delete any existing SSL certificates (this will break anyone using current client certificates)?" yn < /dev/tty
		case $yn in
			[Yy]* ) deleteOldSSLCertificates="yes"; break;;
			[Nn]* ) break;;
			* ) echo "Please answer yes or no.";;
		esac
	done

	if [ ! -z "$deleteOldSSLCertificates" ]; then
		hasexistingvolume=""
	fi
fi


# if there is no existing volume
if [ -z "$hasexistingvolume" ]; then
	if [ -z "$myhostname" ]; then
		echo "Please type in hostname to use for SSL certificate:"
		read -e myhostname < /dev/tty
	fi

	echo "Please type in password to use for client certificate:"
	read -e CertPassword < /dev/tty

	echo "Please type in password to use with admin user for RabbitMq Admin UI:"
	read -e RabbitMqMgmtUiPassword < /dev/tty
fi

echo "Using host:"$myhostname

# remove any existing running containers
docker service rm interfaceengine || echo "interfaceengine is not already present"
docker service rm mysqlserver || echo "certificateserver is not already present"
docker service rm rabbitmq || echo "rabbitmq is not already present"
docker service rm certificateserver || echo "certificateserver is not already present"
docker service rm certdownloadserver || echo "certdownloadserver is not already present"

echo "sleeping to let containers be removed"
sleep 3s;

# remove virtual network
docker network rm realtimenet || echo "realtimenet is not already present"

echo "sleeping to let network be removed"
sleep 15s;

# delete the volume if it exists
if [ ! -z "$deleteOldSSLCertificates" ]; then
  	echo "Deleting old SSL certificates"

	docker volume rm rabbitmqcertstore || echo 'volume rabbitmqcertstore does not exist'

	docker volume rm mysqlstore || echo 'volume mysqlstore does not exist'
fi

# create the volume to store certificates
docker volume create rabbitmqcertstore || echo 'volume rabbitmqcertstore already exists'

# create the volume for mysql data
docker volume create mysqlstore || echo 'volume mysqlstore already exists'


echo "existing services"
docker service ls

echo "creating realtimenet network"
docker network create \
	--driver overlay \
	--subnet=172.28.0.0/16 \
	--ip-range=172.28.5.0/24 \
realtimenet

# use constraints to run the webserver on the same node as rabbitmq

# 8081 = HTTP port for downloading certificates

echo "starting mini webserver to allow access to certificate files"
docker service create --name certificateserver \
	--env CERT_HOSTNAME=$myhostname \
	--env CERT_PASSWORD=$CertPassword \
	-p 8081:3000 \
  	--mount src=rabbitmqcertstore,dst=/app/public \
	--constraint "node.role == manager" \
	--network realtimenet \
	--detach=false \
healthcatalyst/fabric.certificateserver

echo "waiting for certificateserver to come up"
wait-for-it $myhostname:8001 -t 60
sleep 15s;

echo "creating rabbitmq service"

# 5672 = Non SSL port (not exposed ourside of this swarm)
# 5671 = SSL port
# 15672 = SSL port for Management Web UI

docker service create --name rabbitmq \
	--env CERT_HOSTNAME=$myhostname \
	--env CERT_PASSWORD=$CertPassword \
	--env RABBITMQ_MGMT_UI_PASSWORD=$RabbitMqMgmtUiPassword \
  	--mount src=rabbitmqcertstore,dst=/opt/healthcatalyst/,readonly=true \
	--replicas 1 \
	--constraint "node.role == manager" \
	--network realtimenet \
    -p 5671:5671 \
    -p 15672:15672 \
	--detach=false \
healthcatalyst/fabric.realtime.rabbitmq

echo "waiting for rabbitmq to come up"
wait-for-it $myhostname:5671 -t 60
wait-for-it $myhostname:15672 -t 60
sleep 15s;

# affinity documentation
# https://docs.docker.com/engine/reference/commandline/service_create/#options
# https://docs.docker.com/v1.10/swarm/scheduler/filter/

echo "creating mysql service"
docker service create --name mysqlserver \
	--env MYSQL_ROOT_PASSWORD=$MySQLRootPassword \
	--env MYSQL_DATABASE=mirthdb \
	--env MYSQL_USER=$MySQLUser \
	--env MYSQL_PASSWORD=$MySQLPassword \
  	--mount src=mysqlstore,dst=/var/lib/mysql \
	--replicas 1 \
	--network realtimenet \
    -p 3306:3306 \
	--detach=false \
	healthcatalyst/fabric.realtime.mysql

echo "waiting for mysql to come up"
wait-for-it $myhostname:3306 -t 60
sleep 5s;

# 8080 = HTTP port
# 8443 = HTTPS port
# 6661 = Port for receiving HL7 messages

echo "creating mirth service"
docker service create --name interfaceengine \
	--env MYSQL_USER=$MySQLUser \
	--env MYSQL_PASSWORD=$MySQLPassword \
	--replicas 1 \
	--network realtimenet \
    -p 8080:8080 \
    -p 8443:8443 \
    -p 6661:6661 \
	--detach=false \
healthcatalyst/fabric.docker.interfaceengine

echo "waiting for interfaceengine to come up"
wait-for-it $myhostname:8080 -t 60
wait-for-it $myhostname:8433 -t 60
wait-for-it $myhostname:6661 -t 60
wait-for-it $myhostname:5671 -t 60
sleep 5s;

echo "you can download the client certificate from this url"
echo "http://$myhostname:8081/client/fabric_client_cert.p12"

echo "if you want, you can download the CA (Certificate Authority) cert from this url"
echo "http://$myhostname:8081/client/fabric_ca_cert.p12"
