#!/bin/sh
set -e

echo "Version 1.065"

#
# This script is meant for quick & easy install via:
#   curl -sSL https://healthcatalyst.github.io/InstallScripts/nlp/installnlpswarm.txt | sh -s

# Remember: no spaces allowed in variable set commands in bash

echo "---------------------------------------------------"
echo "This script sets up the Fabric.Realtime cluster on Docker"
echo "----------------------------------------------------"


if [[ ! -d "/mnt/hcshared" ]]; then
    echo "/mnt/hcshared is not mounted.  Please mount the file share first."
    echo "For Azure, you can run:"
    echo "curl -sSL https://healthcatalyst.github.io/InstallScripts/docker/setupazurefileshare.txt | sh"
    exit 1
fi

doclean="$1"
mydatetime=$(date +%Y%m%d%H%M%S)

# if wait-for-it is not installed then install it
if [[ ! -f "/usr/local/bin/updatenlp" ]]
then
	sudo yum -y install which dos2unix
	curl -sSL -o /tmp/wait-for-it.sh https://healthcatalyst.github.io/InstallScripts/wait-for-it.sh?rand=$RANDOMNUMBER \
		&& dos2unix /tmp/wait-for-it.sh \
		&& chmod +x /tmp/wait-for-it.sh \
		&& sudo cp /tmp/wait-for-it.sh /usr/bin/wait-for-it \
		&& sudo cp /tmp/wait-for-it.sh /usr/local/bin/wait-for-it \
		&& echo 'curl -sSL https://healthcatalyst.github.io/InstallScripts/nlp/installnlpswarm.txt?rand=$(date +%Y%m%d%H%M%S) | sh -s' | sudo tee /usr/local/bin/updatenlp \
		&& sudo chmod +x /usr/local/bin/updatenlp
fi

# docker service rm mysqlserver || echo "mysqlserver is not already present"
# docker service rm solrserver || echo "solrserver is not already present"
# docker service rm jobserver || echo "jobserver is not already present"
# docker service rm nlpwebserver || echo "nlpwebserver is not already present"
# docker network rm nlpnet || echo "nlpnet is not already present"

docker stack rm fabricnlp &>/dev/null

 echo "waiting until network is removed"

while docker network inspect -f "{{ .Name }}" fabricnlp_nlpnet &>/dev/null; do 
	echo "."; 
	sleep 1; 
done


echo "existing services"
docker service ls

#------ ask for any parameters we need --------------

# disable set -e so the script does not break when there is an error
set +e


docker secret inspect ExternalHostName &>/dev/null
if [ $? -ne 0 ]; then
	read -p "Please type in hostname:" ExternalHostName < /dev/tty
	echo $ExternalHostName | docker secret create ExternalHostName  -
	export NLP_HOST_NAME="$ExternalHostName"
fi

# if [ -z "${NLP_HOST_NAME:-}" ]; then
#	read -p "Please type in hostname:" ExternalHostName < /dev/tty
#	export NLP_HOST_NAME="$ExternalHostName"
# fi

docker secret inspect MySQLPassword &>/dev/null
if [ $? -ne 0 ]; then
	read -p "Please type in password to use for MySql account (NLP_APP_USER):" -e MySQLPassword < /dev/tty
	echo $MySQLPassword | docker secret create MySQLPassword -
fi

docker secret inspect MySQLRootPassword &>/dev/null
if [ $? -ne 0 ]; then
	read -p "Please type in password to use root MySql account:" MySQLRootPassword < /dev/tty
	echo $MySQLRootPassword | docker secret create MySQLRootPassword  -
fi

# docker secret inspect SmtpServer &>/dev/null
#if [ $? -ne 0 ]; then
#	read -p "Please type in SMTP Server:" SmtpServer < /dev/tty
#	echo $SmtpServer | docker secret create SmtpServer  -
#fi

set -e


# ------ set environment variables for the docker stack ----------------
export SHARED_DRIVE_LOGS="/var/logs/fluentd/fabricnlp"
sudo mkdir -p "${SHARED_DRIVE_LOGS}"

export SHARED_DRIVE_SOLR=/mnt/hcshared/fabricnlp/solr
sudo mkdir -p "${SHARED_DRIVE_SOLR}"

export SHARED_DRIVE_MYSQL=/mnt/hcshared/fabricnlp/mysql
sudo mkdir -p "${SHARED_DRIVE_MYSQL}"

export smtpserver=""

# export DOCKER_LOGGING_DRIVER="fluentd"
export DOCKER_LOGGING_DRIVER="json-file"

# ---------- use docker stack deploy to start up all the services --------
stackfilename="nlp-stack.yml"

curl -sSL "https://healthcatalyst.github.io/InstallScripts/nlp/${stackfilename}?rand=$mydatetime" | docker stack deploy --compose-file - fabricnlp

# echo "logs are stored at: ${SHARED_DRIVE_LOGS}"

wait-for-it localhost:3306 -t 120 --strict -- echo "mysql is up" || docker service logs fabricnlp_mysqlserver

wait-for-it localhost:8085 -t 120 --strict -- echo "solr is up" || docker service logs fabricnlp_solrserver

# echo "$NLP_HOST_NAME"