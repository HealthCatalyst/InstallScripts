#!/bin/sh
set -e
# set -x

myreleaseversion="1"

echo "Release Version $myreleaseversion"

echo "script version: 1.0.0"

#
# This script is meant for quick & easy install via:
#   curl -sSL https://healthcatalyst.github.io/InstallScripts/realtime/installrealtimeswarm.txt | sudo sh -s
# or to run a specific release version
#   curl -sSL https://raw.githubusercontent.com/HealthCatalyst/InstallScripts/1/realtime/installrealtimeswarm.txt | sudo sh -s


# Remember: no spaces allowed in variable set commands in bash
myhostname="$1"
MySQLUser="mirthuser"

mydatetime=$(date +%Y%m%d%H%M%S)

if [[ ! -d "/mnt/hcshared" ]]; then
    echo "/mnt/hcshared is not mounted.  Please mount the file share first."
    echo "For Azure, you can run:"
    echo "curl -sSL https://raw.githubusercontent.com/HealthCatalyst/InstallScripts/$myreleaseversion/docker/setupazurefileshare.txt | sh"
    exit 1
fi

# these are set in the script below
CertPassword=""
RabbitMqMgmtUiPassword=""
MySQLPassword=""
MySQLRootPassword=""

echo "---------------------------------------------------"
echo "This script sets up the Fabric.Realtime cluster on Docker"
echo "----------------------------------------------------"

# if wait-for-it is not installed then install it
if [[ ! -f "/usr/local/bin/updaterealtime" ]]
then
	sudo yum -y install which dos2unix
	curl -sSL -o /tmp/wait-for-it.sh https://raw.githubusercontent.com/HealthCatalyst/InstallScripts/$myreleaseversion/wait-for-it.sh?rand=$RANDOMNUMBER \
		&& dos2unix /tmp/wait-for-it.sh \
		&& chmod +x /tmp/wait-for-it.sh \
		&& sudo cp /tmp/wait-for-it.sh /usr/bin/wait-for-it \
		&& sudo cp /tmp/wait-for-it.sh /usr/local/bin/wait-for-it \
		&& echo 'curl -sSL https://raw.githubusercontent.com/HealthCatalyst/InstallScripts/$myreleaseversion/realtime/installrealtimeswarm.txt?rand=$(date +%Y%m%d%H%M%S) | sh -s' | sudo tee /usr/local/bin/updaterealtime \
		&& sudo chmod +x /usr/local/bin/updaterealtime
fi

# see if we already have a cert store created
hasexistingvolume=""

SHARED_DRIVE="/mnt/hcshared"
fabriccertificatestore="$SHARED_DRIVE/certs"
mysqlstore="$SHARED_DRIVE/mysql"
rabbitmqstore="$SHARED_DRIVE/rabbitmq"

if [[ ! -d "$SHARED_DRIVE" ]]; then
	echo "$SHARED_DRIVE folder is not present.  Have you setup the file share per instructions?"
	exit 1
fi

deleteOldSSLCertificates=""

# if there is an existing volume then ask if user wants to delete it
if [[ -d "$fabriccertificatestore" ]]; then
	while true; do
		read -e -p "Do you wish to delete any existing SSL certificates (this will break anyone using current client certificates)?" yn < /dev/tty
		case $yn in
			[Yy]* ) deleteOldSSLCertificates="yes"; break;;
			[Nn]* ) break;;
			* ) echo "Please answer yes or no.";;
		esac
	done

	if [[ ! -z "$deleteOldSSLCertificates" ]]; then
		hasexistingvolume=""
	else
		hasexistingvolume="yes"
	fi
fi

# remove any existing running containers
docker stack rm fabricrealtime

echo "sleeping to let network be removed"
sleep 15s;

docker stack rm fabricrealtime &>/dev/null

 echo "waiting until network is removed"

while docker network inspect -f "{{ .Name }}" fabricrealtime_realtimenet &>/dev/null; do 
	echo "."; 
	sleep 1; 
done

# if there is no existing volume then ask for passwords
if [[ -z "$hasexistingvolume" ]]; then
	if [[ -z "$myhostname" ]]; then
		read -p "Please type in hostname to use for SSL certificate: " myhostname < /dev/tty
	fi

	docker secret rm CertHostName || echo ""
	echo $myhostname | docker secret create CertHostName -

	read -p "Please type in password to use for client certificate: " CertPassword < /dev/tty
	docker secret rm CertPassword || echo ""
	echo $CertPassword | docker secret create CertPassword -

	read -p "Please type in password to use with admin user for RabbitMq Admin UI:" RabbitMqMgmtUiPassword < /dev/tty
	docker secret rm RabbitMqMgmtUiPassword || echo ""
	echo $RabbitMqMgmtUiPassword | docker secret create RabbitMqMgmtUiPassword -

	connectToSqlServer=""
	while true; do
		read -e -p "Do you wish to use an external Microsoft SQL Server for interface engine logs?" yn < /dev/tty
		case $yn in
			[Yy]* ) connectToSqlServer="yes"; break;;
			[Nn]* ) break;;
			* ) echo "Please answer yes or no.";;
		esac
	done

	if [[ ! -z "$connectToSqlServer" ]]
	then
		read -p "Please type in username of Windows Service Account to use to connect to SQL Server (e.g., imran.qureshi):" -e sqlserverusername < /dev/tty
		docker secret rm SqlServerUserName || echo ""
		echo $sqlserverusername | docker secret create SqlServerUserName -

		read -p "Please type in password for Windows Service Account to use to connect to SQL Server:" -e sqlserverpassword < /dev/tty
		docker secret rm SqlServerPassword || echo ""
		echo $sqlserverpassword | docker secret create SqlServerPassword -

		read -p "Please type in Windows domain to use to connect to SQL Server (e.g., hqcatalyst.local):" -e sqlserverdomain < /dev/tty
		docker secret rm SqlServerDomain || echo ""
		echo $sqlserverdomain | docker secret create SqlServerDomain -

		read -p "Please type in Windows Active Directory URL to use to connect to SQL Server (e.g., hcsad1):" -e sqlserveradurl < /dev/tty
		docker secret rm SqlServerADUrl || echo ""
		echo $sqlserveradurl | docker secret create SqlServerADUrl -

		read -p "Please type in SQL Server to connect to (e.g., hc2034):" -e sqlserverserver < /dev/tty
		docker secret rm SqlServerName || echo ""
		echo $sqlserverserver | docker secret create SqlServerName -

		read -p "Please type in Database Name to use in SQL Server (e.g., MyRealtimeDb):" -e sqlserverdatabase < /dev/tty
		docker secret rm sqlserverdatabase || echo ""
		echo $sqlserverdatabase | docker secret create SqlServerDatabase -
	else
		read -p "Please type in password to use for MySql account (mirthuser):" -e MySQLPassword < /dev/tty
		docker secret rm MySQLPassword || echo ""
		echo $MySQLPassword | docker secret create MySQLPassword -

		read -p "Please type in password to use root MySql account:" MySQLRootPassword < /dev/tty
		docker secret rm MySQLRootPassword || echo ""
		echo $MySQLRootPassword | docker secret create MySQLRootPassword  -
	fi
fi

# delete the volume if it exists
if [ ! -z "$deleteOldSSLCertificates" ]; then
  	echo "Deleting old SSL certificates"

	sudo rm -r "$fabriccertificatestore"

	sudo rm -r "$mysqlstore"

	sudo rm -r "$rabbitmqstore"
fi

# create the volume to store certificates
sudo mkdir -p "$fabriccertificatestore"

# create the volume for mysql data
sudo mkdir -p "$mysqlstore"

# create the volume for rabbitmq data
sudo mkdir -p "$rabbitmqstore"

echo "existing services"
docker service ls

echo "Existing secrets"
docker secret ls

myhostname=${myhostname:-localhost}

echo "Using hostname=$myhostname"

# make sure we can pull an image
docker pull healthcatalyst/fabric.docker.interfaceengine:$myreleaseversion
docker pull healthcatalyst/fabric.certificateserver:$myreleaseversion
docker pull healthcatalyst/fabric.realtime.rabbitmq:$myreleaseversion
docker pull healthcatalyst/fabric.realtime.mysql:$myreleaseversion


export SHARED_DRIVE=$SHARED_DRIVE
export SHARED_DRIVE_CERTS=$fabriccertificatestore
export SHARED_DRIVE_RABBITMQ=$rabbitmqstore
export SHARED_DRIVE_MYSQL=$mysqlstore
export SHARED_DRIVE_LOGS="/var/logs/fluentd/fabricrealtime"
sudo mkdir -p ${SHARED_DRIVE_LOGS}

# use docker stack deploy to start up all the services
stackfilename="realtime-stack.yml"
if [[ ! -z "$connectToSqlServer" ]]
then
	stackfilename="realtime-stack-sqlserver.yml"
fi

curl -sSL "https://raw.githubusercontent.com/HealthCatalyst/InstallScripts/${myreleaseversion}/realtime/${stackfilename}?rand=$mydatetime" | docker stack deploy --compose-file - fabricrealtime

echo "waiting for certificateserver to come up"
wait-for-it $myhostname:8081 -t 60

echo "waiting for rabbitmq to come up"
wait-for-it $myhostname:5671 -t 60
wait-for-it $myhostname:15672 -t 60

echo "waiting for mysql to come up"
# wait-for-it $myhostname:3306 -t 60

echo "waiting for interfaceengine to come up"
wait-for-it $myhostname:8080 -t 60
# wait-for-it $myhostname:8433 -t 60
# wait-for-it $myhostname:6661 -t 60

echo "testing rabbitmq one more time"
wait-for-it $myhostname:5671 -t 60

echo "logs are stored at: ${SHARED_DRIVE_LOGS}"

echo "if you want, you can download the CA (Certificate Authority) cert from this url"
echo "http://$myhostname:8081/client/fabric_ca_cert.p12"

echo "-------------------------------"
echo "you can download the client certificate from this url:"
echo "http://$myhostname:8081/client/fabricrabbitmquser_client_cert.p12"
echo "-------------------------------"

