#!/bin/sh
set -e
#
# This script is meant for quick & easy install via:
#   'curl -sSL https://healthcatalyst.github.io/InstallScripts/installkibana.txt | sh -s <ip1 of elasticsarch>'
#   'curl -sSL https://healthcatalyst.github.io/InstallScripts/installkibana.txt | sh -s 10.5.4.4'
# or:
#   'wget -qO- https://healthcatalyst.github.io/InstallScripts/installkibana.txt | sh -s <ip1> <ip2> <ip3>'
#
#

echo "starting version 2.11"
defaultpassword=""

echo "Starting setup..."
u="$(whoami)"
echo "User name: $u"

# no spaces allowed in variable set commands
ip1="$1"
serverhost="$2"
ssl="$3"
paramsToES=""

if [ -z "$ip1" ]; then
  myip=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' fabric.docker.elasticsearch)

  echo "ElasticSearch IP:"
  echo $myip
  ip1="$myip"
fi

if [ -z "$serverhost" ]; then
  serverhost="0.0.0.0"
fi

echo "Please enter name for cluster:"
read -e clustername < /dev/tty 

echo "Please type in password to use for ElasticSearch built-in accounts:"
read -e defaultpassword < /dev/tty

# ask if user wants to use SSL
if [ -z "$ssl" ]; then
  while true; do
      read -e -p "Do you wish to turn on SSL?" yn < /dev/tty
      case $yn in
          [Yy]* ) ssl="yes"; break;;
          [Nn]* ) break;;
          * ) echo "Please answer yes or no.";;
      esac
  done
fi

hostname="$(hostname -s)"

echo "==== Parameters ======"
echo "node name: [$hostname]" 
echo "ip1: $ip1"
echo "ssl: $ssl"
echo "==== End Parameters ===="

echo "==== Creating update script ===="

installfolder="/opt/install/"
installscriptfile="updatedocker"
installscript="$installfolder$installscriptfile"

mkdir -p $HOME/bin
if [[ ! -d "$installfolder" ]]; then
  sudo mkdir -p $installfolder

  sudo setfacl -m u:$u:rwx $installfolder
fi

echo "#!/bin/sh" > $installscript
echo "curl -sSL https://healthcatalyst.github.io/InstallScripts/installkibana.txt | sh -s $@" >> $installscript
chmod +x $installscript

if [[ ! -e "$HOME/bin/$installscriptfile" ]]; then 
  echo "creating a symbolic link for install file"
  echo "ln -f -s $installscript $HOME/bin/$installscriptfile"
  ln -f -s $installscript $HOME/bin/$installscriptfile
fi

protocol="http"

if [ ! -z "$ssl" ]; then
  echo "Setting up SSL"

  protocol="https"
  if [[ ! -f "$installfolder/node.key" ]]; then
    echo "$installfolder/node.key does not exist" 
    exit 1
  fi
  if [[ ! -f "$installfolder/node.crt" ]]; then
    echo "$installfolder/node.crt does not exist" 
    exit 1
  fi
  if [[ ! -f "$installfolder/ca.crt" ]]; then
    echo "$installfolder/ca.crt does not exist" 
    exit 1
  fi 
fi

echo "==== Update script ===="
cat $installscript
echo "==== End Update Script ===="

echo "==== Downloading and installing ElasticSearch Docker container ===="

echo "====  existing containers on this host ===="
docker ps -a

echo "==== existing images on this host ===="
docker images

echo "==== existing volumes on this host ===="
docker volume ls

# check to see if volume already exists.  if not, create it
if [ -z $(docker volume ls -q --filter "name=esdata") ]; then
  echo "==== Creating persistent volume for ElasticSearch ===="
  docker volume create --name esdata
fi

echo "stopping existing docker container"
docker stop fabric.docker.kibana || echo 'no container to stop'
echo "removing docker container"
docker rm fabric.docker.kibana || echo 'no container to remove'
echo "removing docker image"
docker rmi healthcatalyst/fabric.docker.kibana || echo 'no image to remove'
echo "pulling latest docker image from repo"
docker pull healthcatalyst/fabric.docker.kibana
echo "starting docker container with new image."
set -x
docker create -p 5601:5601 --restart=unless-stopped --name fabric.docker.kibana -e ELASTICSEARCH_URL=$protocol://$ip1:9200 -e SERVER_HOST=$serverhost -e ELASTICSEARCH_USERNAME=kibana -e ELASTICSEARCH_PASSWORD=$defaultpassword $paramsToES healthcatalyst/fabric.docker.kibana 
set +x

echo "sleeping for 5s so docker container is up"
sleep 5s

nodekeyfile="node.key"
nodekeypath="$installfolder$nodekeyfile"

if [ ! -z "$ssl" ]; then
  echo "Checking if [$nodekeypath] exists"
  if [[ -f "$nodekeypath" ]]; then
    echo "copying ssl keys from $installfolder"
    docker cp $installfolder/node.key fabric.docker.kibana:/usr/share/kibana/config
    docker cp $installfolder/node.crt fabric.docker.kibana:/usr/share/kibana/config
    docker cp $installfolder/ca.crt fabric.docker.kibana:/usr/share/kibana/config

    docker start fabric.docker.kibana

    sleep 5s

    # use kibanassl.yml
    docker exec fabric.docker.kibana /bin/cp -rf /usr/share/kibana/config/kibanassl.yml /usr/share/kibana/config/kibana.yml

    docker restart fabric.docker.kibana

    echo "kibana set up with SSL"

    protocol="https"
  else
    echo "ERROR: No key files found in [$nodekeypath] so cannot set up SSL"
  fi

else
    docker start fabric.docker.kibana

    sleep 5s

    # use kibanasecure.yml since we don't have ssl keys
    docker exec fabric.docker.kibana /bin/cp -rf /usr/share/kibana/config/kibanasecure.yml /usr/share/kibana/config/kibana.yml

    docker restart fabric.docker.kibana
fi


  echo "sleeping until docker container is up"
  until [ "`/usr/bin/docker inspect -f {{.State.Running}} fabric.docker.kibana`"=="true" ]; do
      sleep 1s;
  done;

# https://www.elastic.co/guide/en/x-pack/current/kibana.html

echo "==== Listing running docker containers ===="
docker ps

echo "sleeping for 30 secs"
sleep 30s;

externalip=$(curl ipecho.net/plain)
echo "External IP:" $externalip

declare -i c=10

c=0

while [ $c -lt 60 ]; do
    echo "curl -X GET $protocol://localhost:5601 -k -verbose"
    curl -X GET -u elastic:$defaultpassword $protocol://localhost:5601 -k -verbose
    RETVAL=$?
    echo "RETVAL:[$RETVAL]"
    if [ $RETVAL -eq 0 ]; then 
      break 
    fi    
    c=$c+1
    echo "Trying again [$c]"
    sleep 1s
done


echo "==== All Done ===="
echo "NOTE To update the docker image on this host in the future, just run"
echo "$installscriptfile"
