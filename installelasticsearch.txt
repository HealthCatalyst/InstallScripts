#!/bin/sh
set -e
#
# This script is meant for quick & easy install via:
#   'curl -sSL https://imranq2.github.io/InstallScripts/installelasticsearch.txt | sh -s <ip1> <ip2> <ip3>'
#   'curl -sSL https://imranq2.github.io/InstallScripts/installelasticsearch.txt | sh -s 10.0.0.5 10.0.0.6 10.0.0.7'
#   'curl -sSL https://imranq2.github.io/InstallScripts/installelasticsearch.txt | sh -s 10.4.0.5 10.4.0.6 10.4.0.7'
# or:
#   'wget -qO- https://imranq2.github.io/InstallScripts/installelasticsearch.txt | sh -s <ip1> <ip2> <ip3>'
#
#

echo "Starting setup..."
u="$(whoami)"
echo "User name: $u"

declare -i freememInBytes=10
freememInBytes=$(free|awk '/^Mem:/{print $2}')

# echo "param 1: [" $1 "]"

if [ "$#" -lt 1 ]; then
  echo "Error: Must pass IP1 IP2(optional) IP3(optional)" >&2
  echo "Usage: curl -sSL https://imranq2.github.io/InstallScripts/installelasticsearch.txt | sh -s <ip1> <ip2> <ip3>" >&2
  exit 1
fi

# no spaces allowed in variable set commands
ip1="$1"
ip2="$2"
ip3="$3"
hosts="$ip1"
hostname="$(hostname -s)"

if [ ! -z "$ip2" ]; then
  hosts="$hosts"",""$ip2"
fi

if [ ! -z "$ip3" ]; then
  hosts="$hosts"",""$ip3"
fi

# http://stackoverflow.com/questions/8529181/which-terminal-command-to-get-just-ip-address-and-nothing-else
myip=$(ip -4 addr show eth0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
#myip=$(hostname -i)

externalip=$(curl ipecho.net/plain)

javaOpts="-Xms6g -Xmx6g"
if [ $freememInBytes -lt 8000000 ]; then
  echo "WARNING: Less than 8GB of memory is free so setting ES to run in 2GB but this is not recommended for good performance"
  javaOpts="-Xms2g -Xmx2g"
fi

echo "==== Parameters ======"
echo "node name: [$hostname]" 
echo "ip1: $ip1"
echo "ip2: $ip2"
echo "ip3: $ip3"
echo "myip: $myip"
echo "hosts: $hosts"
echo "freememInBytes: $freememInBytes"
echo "javaOpts: $javaOpts"
echo "==== End Parameters ===="

echo "==== Creating update script ===="

installfolder="/opt/install/"
installscriptfile="updatedocker"
installscript="$installfolder$installscriptfile"

mkdir -p $HOME/bin
sudo mkdir -p $installfolder

sudo setfacl -m u:$u:rwx $installfolder

echo "#!/bin/sh" > $installscript
echo "curl -sSL https://imranq2.github.io/InstallScripts/installelasticsearch.txt | sh -s $@" >> $installscript
chmod +x $installscript

echo "creating a symbolic link for install file"
echo "ln -f -s $installscript $HOME/bin/$installscriptfile"
ln -f -s $installscript $HOME/bin/$installscriptfile

echo "==== Update script ===="
cat $installscript
echo "==== End Update Script ===="

echo "==== Downloading and installing ElasticSearch Docker container ===="

echo "====  existing containers on this host ===="
docker ps -a

echo "==== existing images on this host ===="
docker images

echo "==== existing volumes on this host ===="
docker volume ls

# check to see if volume already exists.  if not, create it
if [ -z $(docker volume ls -q --filter "name=esdata") ]; then
  echo "==== Creating persistent volume for ElasticSearch ===="
  docker volume create --name esdata
fi

echo "stopping existing docker container"
docker stop dockerelasticsearch || echo 'no container to stop'
echo "removing docker container"
docker rm dockerelasticsearch || echo 'no container to remove'
echo "removing docker image"
docker rmi imranq2/dockerelasticsearch || echo 'no image to remove'
echo "pulling latest docker image from repo"
docker pull imranq2/dockerelasticsearch
echo "starting docker container with new image"
docker run -d -p 9200:9200 -p 9300:9300 -v esdata:/usr/share/elasticsearch/data --add-host es-master:$ip1 --add-host es-slave1:$ip2 --add-host es-slave2:$ip3 --security-opt seccomp=unconfined -e ES_JAVA_OPTS="$javaOpts" --name dockerelasticsearch imranq2/dockerelasticsearch -Enetwork.host=_eth0_ -Enetwork.publish_host=$myip -Enode.name=$hostname -Ediscovery.zen.ping.unicast.hosts="$hosts"

echo "sleeping for 5s so docker container is up"
sleep 5s

echo "==== Listing running docker containers ===="
docker ps


echo "==== calling ElasticSearch from localhost ===="

declare -i c=10

c=0

# disable set -e so the script does not break when there is an error with curl
set +e

while [ $c -lt 60 ]; do
    echo "curl -X GET http://localhost:9200"
    curl -X GET http://localhost:9200
    RETVAL=$?
    echo "RETVAL:[$RETVAL]"
    if [ $RETVAL -eq 0 ]; then 
      break 
    fi    
    c=$c+1
    echo "Trying again [$c]"
    sleep 1s
done

set -e

echo "curl -X GET http://localhost:9200/_cluster/health?pretty"
curl -X GET http://localhost:9200/_cluster/health?pretty

# echo "checking from externalip"
# curl -X GET http://$externalip:9200

echo "==== All Done ===="
echo "NOTE To update the docker image on this host in the future, just run"
echo "$installscriptfile"
