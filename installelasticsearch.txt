#!/bin/sh
set -e
#
# This script is meant for quick & easy install via:
#   'curl -sSL https://imranq2.github.io/InstallScripts/installelasticsearch.txt | sh -s <ip1> <ip2> <ip3>'
#   'curl -sSL https://imranq2.github.io/InstallScripts/installelasticsearch.txt | sh -s 10.4.0.5 10.4.0.6 10.4.0.7 ssl'
# or:
#   'wget -qO- https://imranq2.github.io/InstallScripts/installelasticsearch.txt | sh -s <ip1> <ip2> <ip3>'
#


echo "starting version 1.7"

clustername="catalystdev"
defaultpassword="ILoveElasticSearch2017"

echo "Starting setup..."
u="$(whoami)"
echo "User name: $u"

runningOnOS=$(uname)
runningOnMac=0

if [ "$runningOnOS" == "Darwin" ]; then
  echo "Running on Mac"
  runningOnMac=1
fi

declare -i freememInBytes=10

freememInBytes=8000000
if [ "$runningOnMac" == "0" ]; then
  freememInBytes=$(free|awk '/^Mem:/{print $2}')
fi

# echo "param 1: [" $1 "]"

# no spaces allowed in variable set commands
ip1="$1"
ip2="$2"
ip3="$3"
ssl="$4"
paramsToES=""

externalip=$(curl ipecho.net/plain)

# http://stackoverflow.com/questions/8529181/which-terminal-command-to-get-just-ip-address-and-nothing-else
myip=$(ip -4 addr show eth0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
#myip=$(hostname -i)

echo "MyIP:"$myip

if [ -z "$ip1" ]; then
  echo "No IP passed in command line so setting ip1 to $myip"
  ip1="$myip"
  ip2="$myip"
  ip3="$myip"
fi

hosts="$ip1"
hostname="$(hostname -s)"

if [ ! -z "$ip2" ]; then
  hosts="$hosts"",""$ip2"
fi

if [ ! -z "$ip3" ]; then
  hosts="$hosts"",""$ip3"
fi

if [ ! -z "$ssl" ]; then
  echo "Setting up SSL"
  paramsToES="-E xpack.security.http.ssl.enabled=true -E xpack.ssl.key=node.key -E xpack.ssl.certificate=node.crt -E xpack.ssl.certificate_authorities=ca.crt -E xpack.security.transport.ssl.enabled=true -E xpack.security.transport.ssl.verification_mode=certificate"

  echo $paramsToES
fi

javaOpts="-Xms6g -Xmx6g"
if [ $freememInBytes -lt 8000000 ]; then
  echo "WARNING: Less than 8GB of memory is free so setting ES to run in 2GB but this is not recommended for good performance"
  javaOpts="-Xms2g -Xmx2g"
fi

echo "==== Parameters ======"
echo "node name: [$hostname]" 
echo "ip1: $ip1"
echo "ip2: $ip2"
echo "ip3: $ip3"
echo "myip: $myip"
echo "hosts: $hosts"
echo "freememInBytes: $freememInBytes"
echo "javaOpts: $javaOpts"
echo "==== End Parameters ===="

echo "==== Creating update script ===="

installfolder="/opt/install/"
installscriptfile="updatedocker"
installscript="$installfolder$installscriptfile"

mkdir -p $HOME/bin
if [[ ! -d "$installfolder" ]]; then
  sudo mkdir -p $installfolder

  sudo setfacl -m u:$u:rwx $installfolder
fi

echo "#!/bin/sh" > $installscript
echo "curl -sSL https://imranq2.github.io/InstallScripts/installelasticsearch.txt | sh -s $@" >> $installscript
chmod +x $installscript

if [[ ! -e "$HOME/bin/$installscriptfile" ]]; then 
  echo "creating a symbolic link for install file"
  echo "ln -f -s $installscript $HOME/bin/$installscriptfile"
  ln -f -s $installscript $HOME/bin/$installscriptfile
fi

echo "==== Update script ===="
cat $installscript
echo "==== End Update Script ===="

echo "==== Downloading and installing ElasticSearch Docker container ===="

echo "====  existing containers on this host ===="
docker ps -a

echo "==== existing images on this host ===="
docker images

echo "==== existing volumes on this host ===="
docker volume ls

# check to see if volume already exists.  if not, create it
if [ -z $(docker volume ls -q --filter "name=esdata") ]; then
  echo "==== Creating persistent volume for ElasticSearch ===="
  docker volume create --name esdata
fi

echo "stopping existing docker container"
docker stop dockerelasticsearch || echo 'no container to stop'
echo "removing docker container"
docker rm dockerelasticsearch || echo 'no container to remove'
echo "removing docker image"
docker rmi imranq2/dockerelasticsearch || echo 'no image to remove'
echo "pulling latest docker image from repo"
docker pull imranq2/dockerelasticsearch
echo "starting docker container with new image"
set -x
# https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html
docker run -d -p 9200:9200 -p 9300:9300 -v esdata:/usr/share/elasticsearch/data --add-host es-master:$ip1 --add-host es-slave1:$ip2 --add-host es-slave2:$ip3 --security-opt seccomp=unconfined -e ES_JAVA_OPTS="$javaOpts" --name dockerelasticsearch imranq2/dockerelasticsearch -E network.host=_eth0_ -E network.publish_host=$myip -E node.name=$hostname -E discovery.zen.ping.unicast.hosts="$hosts" -E cluster.name=$clustername -E xpack.security.enabled=true $paramsToES
set +x

echo "sleeping until docker container is up"
until [ "`/usr/bin/docker inspect -f {{.State.Running}} dockerelasticsearch`"=="true" ]; do
    sleep 1s;
done;

nodekeyfile="node.key"
nodekeypath="$installfolder$nodekeyfile"

protocol="http"

if [ ! -z "$ssl" ]; then
  echo "Checking if [$nodekeypath] exists"
  if [[ -f "$nodekeypath" ]]; then
    echo "copying ssl keys from $installfolder"
    docker cp $installfolder/node.key dockerelasticsearch:/usr/share/elasticsearch/config
    docker cp $installfolder/node.crt dockerelasticsearch:/usr/share/elasticsearch/config
    docker cp $installfolder/ca.crt dockerelasticsearch:/usr/share/elasticsearch/config

    protocol="https"
  else
    echo "ERROR: No key files found in [$nodekeypath] so cannot set up SSL"
  fi

  docker restart dockerelasticsearch
  echo "sleeping until docker container is up"
  until [ "`/usr/bin/docker inspect -f {{.State.Running}} dockerelasticsearch`"=="true" ]; do
      sleep 1s;
  done;

fi

echo "==== Listing running docker containers ===="
docker ps

echo "sleeping for 10 secs"
sleep 10s;

echo "==== calling ElasticSearch from localhost ===="

declare -i c=10

c=0

# disable set -e so the script does not break when there is an error with curl
set +e

while [ $c -lt 60 ]; do
    echo "curl -X GET $protocol://localhost:9200"
    curl -X GET -u elastic:changeme $protocol://localhost:9200 -k
    RETVAL=$?
    echo "RETVAL:[$RETVAL]"
    if [ $RETVAL -eq 0 ]; then 
      break 
    fi    
    c=$c+1
    echo "Trying again [$c]"
    sleep 1s
done

set -e

# https://www.elastic.co/guide/en/x-pack/current/setting-up-authentication.html
echo "Resetting default passwords"
set -x
responseStatus=$(curl -X GET -u elastic:changeme $protocol://localhost:9200 -k | jq -s .[0].status)

if [ "$responseStatus" == "401" ]; then
  echo "default password was already changed"
else
  echo "changing default password"
  curl -XPUT -u elastic:changeme "$protocol://localhost:9200/_xpack/security/user/elastic/_password" -d"{ \"password\": \"$defaultpassword\"}" -k
fi

curl -XPUT -u elastic:$defaultpassword "$protocol://localhost:9200/_xpack/security/user/kibana/_password" -d"{ \"password\": \"$defaultpassword\"}" -k
curl -XPUT -u elastic:$defaultpassword "$protocol://localhost:9200/_xpack/security/user/logstash_system/_password" -d"{ \"password\": \"$defaultpassword\"}" -k

echo "Giving kibana_user access to all indexes"
curl -XPOST -u elastic:$defaultpassword "$protocol://localhost:9200/_xpack/security/role/kibana_user" -d '{"indices": [{"names": ["*"]}]}'

echo "curl -X GET $protocol://localhost:9200/_cluster/health?pretty"
curl -X GET -u elastic:$defaultpassword $protocol://localhost:9200/_cluster/health?pretty -k
set +x

echo "listing all nodes"
curl -XGET -u elastic:$defaultpassword $protocol://localhost:9200/_nodes/_all/host,ip,name?pretty -k

echo "creating a test index"
curl -XPOST -u elastic:$defaultpassword "$protocol://localhost:9200/testindex/testdoc/1" -d'{"name": "foo","age":10}' -k

echo "querying test document"
curl -XPOST -u elastic:$defaultpassword "$protocol://localhost:9200/testindex/_search?pretty" -d'{"query": {"match_all": {}}}' -k

# echo "checking from externalip"
# curl -X GET http://$externalip:9200


externalip=$(curl ipecho.net/plain)
echo "External IP:" $externalip

echo "==== All Done ===="
echo "NOTE To update the docker image on this host in the future, just run"
echo "$installscriptfile"
